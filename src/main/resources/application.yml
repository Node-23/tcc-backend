spring:
  application:
    name: tcc-backend
  profiles:
    active: dev

---
app:
  frontend-url: ${FRONTEND_URL}

spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

  data:
    mongodb:
      uri: {MONGO_DB_URI}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_ID}
            client-secret: ${GOOGLE_OAUTH_SECRET}
            scope:
              - openid
              - profile
              - email
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

server:
  port: 8080

logging:
  level:
    org:
      springframework:
        security: DEBUG
  file:
    path: home/log
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

jwt:
  private:
    key: classpath:private_key.pem
  public:
    key: classpath:public_key.pem

aws:
  s3:
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_ACCESS_KEY_SECRET}
    region: ${AWS_REGION}
    bucket-name: ${S3_BUCKET_NAME}
---

app:
  frontend-url: ${FRONTEND_URL}

spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

  data:
    mongodb:
      uri: {MONGO_DB_URI}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_ID}
            client-secret: ${GOOGLE_OAUTH_SECRET}
            scope:
              - openid
              - profile
              - email
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

server:
  port: 8082

logging:
  file:
    path: /var/log/myapp
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

jwt:
  private:
    key: classpath:private_key.pem
  public:
    key: classpath:public_key.pem

aws:
  s3:
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_ACCESS_KEY_SECRET}
    region: ${AWS_REGION}
    bucket-name: ${S3_BUCKET_NAME}